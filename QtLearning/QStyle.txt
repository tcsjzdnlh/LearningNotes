Detailed Description

The QStyle class 
is an abstract base class 
that encapsulates the look and feel of a GUI.


Qt contains a set of QStyle subclasses 
that emulate the styles of the different platforms 
supported by Qt (QWindowsStyle, QMacStyle etc.). 

By default, 
these styles are built into the Qt GUI module. 
Styles can also be made available as plugins.
Qt's built-in widgets use QStyle 
to perform nearly all of their drawing, 
ensuring that they look exactly like the equivalent native widgets. 
The diagram below 
shows a QComboBox in eight different styles.


Topics: 
Setting a Style
The style of the entire application can be set using the QApplication::setStyle() function. It can also be specified by the user of the application, using the -style command-line option:

  ./myapplication -style windows

If no style is specified, Qt will choose the most appropriate style for the user's platform or desktop environment.
A style can also be set on an individual widget using the QWidget::setStyle() function. 
Developing Style-Aware Custom Widgets
If you are developing custom widgets and want them to look good on all platforms, you can use QStyle functions to perform parts of the widget drawing, such as drawItemText(), drawItemPixmap(), drawPrimitive(), drawControl(), and drawComplexControl().
Most QStyle draw functions take four arguments:
an enum value specifying which graphical element to draw
a QStyleOption specifying how and where to render that element
a QPainter that should be used to draw the element
a QWidget on which the drawing is performed (optional)
For example, if you want to draw a focus rectangle on your widget, you can write:

  void MyWidget::paintEvent(QPaintEvent * /* event */)
  {
      QPainter painter(this);

      QStyleOptionFocusRect option;
      option.initFrom(this);
      option.backgroundColor = palette().color(QPalette::Background);

      style()->drawPrimitive(QStyle::PE_FrameFocusRect, &option, &painter, this);
  }

QStyle gets all the information it needs to render the graphical element from QStyleOption. The widget is passed as the last argument in case the style needs it to perform special effects (such as animated default buttons on OS X), but it isn't mandatory. In fact, you can use QStyle to draw on any paint device, not just widgets, by setting the QPainter properly.
QStyleOption has various subclasses for the various types of graphical elements that can be drawn. For example, PE_FrameFocusRect expects a QStyleOptionFocusRect argument.
To ensure that drawing operations are as fast as possible, QStyleOption and its subclasses have public data members. See the QStyleOption class documentation for details on how to use it.
For convenience, Qt provides the QStylePainter class, which combines a QStyle, a QPainter, and a QWidget. This makes it possible to write

      QStylePainter painter(this);
      ...
      painter.drawPrimitive(QStyle::PE_FrameFocusRect, option);

instead of

      QPainter painter(this);
      ...
      style()->drawPrimitive(QStyle::PE_FrameFocusRect, &option, &painter, this);
 
Creating a Custom Style
You can create a custom look and feel for your application by creating a custom style. There are two approaches to creating a custom style. In the static approach, you either choose an existing QStyle class, subclass it, and reimplement virtual functions to provide the custom behavior, or you create an entire QStyle class from scratch. In the dynamic approach, you modify the behavior of your system style at runtime. The static approach is described below. The dynamic approach is described in QProxyStyle.
The first step in the static approach is to pick one of the styles provided by Qt from which you will build your custom style. Your choice of QStyle class will depend on which style resembles your desired style the most. The most general class that you can use as a base is QCommonStyle (not QStyle). This is because Qt requires its styles to be QCommonStyles.
Depending on which parts of the base style you want to change, you must reimplement the functions that are used to draw those parts of the interface. To illustrate this, we will modify the look of the spin box arrows drawn by QWindowsStyle. The arrows are primitive elements that are drawn by the drawPrimitive() function, so we need to reimplement that function. We need the following class declaration:

  class CustomStyle : public QProxyStyle
  {
      Q_OBJECT

  public:
      CustomStyle();
      ~CustomStyle() {}

      void drawPrimitive(PrimitiveElement element, const QStyleOption *option,
                         QPainter *painter, const QWidget *widget) const;
  };

To draw its up and down arrows, QSpinBox uses the PE_IndicatorSpinUp and PE_IndicatorSpinDown primitive elements. Here's how to reimplement the drawPrimitive() function to draw them differently:

  void CustomStyle::drawPrimitive(PrimitiveElement element, const QStyleOption *option,
                                  QPainter *painter, const QWidget *widget) const
  {
      if (element == PE_IndicatorSpinUp || element == PE_IndicatorSpinDown) {
          QPolygon points(3);
          int x = option->rect.x();
          int y = option->rect.y();
          int w = option->rect.width() / 2;
          int h = option->rect.height() / 2;
          x += (option->rect.width() - w) / 2;
          y += (option->rect.height() - h) / 2;

          if (element == PE_IndicatorSpinUp) {
              points[0] = QPoint(x, y + h);
              points[1] = QPoint(x + w, y + h);
              points[2] = QPoint(x + w / 2, y);
          } else { // PE_SpinBoxDown
              points[0] = QPoint(x, y);
              points[1] = QPoint(x + w, y);
              points[2] = QPoint(x + w / 2, y + h);
          }

          if (option->state & State_Enabled) {
              painter->setPen(option->palette.mid().color());
              painter->setBrush(option->palette.buttonText());
          } else {
              painter->setPen(option->palette.buttonText().color());
              painter->setBrush(option->palette.mid());
          }
          painter->drawPolygon(points);
      } else {
      QProxyStyle::drawPrimitive(element, option, painter, widget);
      }
  }

Notice that we don't use the widget argument, except to pass it on to the QWindowStyle::drawPrimitive() function. As mentioned earlier, the information about what is to be drawn and how it should be drawn is specified by a QStyleOption object, so there is no need to ask the widget.
If you need to use the widget argument to obtain additional information, be careful to ensure that it isn't 0 and that it is of the correct type before using it. For example:

      const QSpinBox *spinBox = qobject_cast<const QSpinBox *>(widget);
      if (spinBox) {
      ...
      }

When implementing a custom style, you cannot assume that the widget is a QSpinBox just because the enum value is called PE_IndicatorSpinUp or PE_IndicatorSpinDown.
The documentation for the Styles example covers this topic in more detail.
Warning: Qt style sheets are currently not supported for custom QStyle subclasses. We plan to address this in some future release. 
Using a Custom Style
There are several ways of using a custom style in a Qt application. The simplest way is to pass the custom style to the QApplication::setStyle() static function before creating the QApplication object:

  #include <QtWidgets>

  #include "customstyle.h"

  int main(int argc, char *argv[])
  {
      QApplication::setStyle(new CustomStyle);
      QApplication app(argc, argv);
      QSpinBox spinBox;
      spinBox.show();
      return app.exec();
  }

You can call QApplication::setStyle() at any time, but by calling it before the constructor, you ensure that the user's preference, set using the -style command-line option, is respected.
You may want to make your custom style available for use in other applications, which may not be yours and hence not available for you to recompile. The Qt Plugin system makes it possible to create styles as plugins. Styles created as plugins are loaded as shared objects at runtime by Qt itself. Please refer to the Qt Plugin documentation for more information on how to go about creating a style plugin.
Compile your plugin and put it into Qt's plugins/styles directory. We now have a pluggable style that Qt can load automatically. To use your new style with existing applications, simply start the application with the following argument:

  ./myapplication -style custom

The application will use the look and feel from the custom style you implemented. 
Right-to-Left Desktops
Languages written from right to left (such as Arabic and Hebrew) usually also mirror the whole layout of widgets, and require the light to come from the screen's top-right corner instead of top-left.
If you create a custom style, you should take special care when drawing asymmetric elements to make sure that they also look correct in a mirrored layout. An easy way to test your styles is to run applications with the -reverse command-line option or to call QApplication::setLayoutDirection() in your main() function.
Here are some things to keep in mind when making a style work well in a right-to-left environment:
subControlRect() and subElementRect() return rectangles in screen coordinates
QStyleOption::direction indicates in which direction the item should be drawn in
If a style is not right-to-left aware it will display items as if it were left-to-right
visualRect(), visualPos(), and visualAlignment() are helpful functions that will translate from logical to screen representations.
alignedRect() will return a logical rect aligned for the current direction 
Styles in Item Views
The painting of items in views is performed by a delegate. Qt's default delegate, QStyledItemDelegate, is also used for calculating bounding rectangles of items, and their sub-elements for the various kind of item data roles QStyledItemDelegate supports. See the QStyledItemDelegate class description to find out which datatypes and roles are supported. You can read more about item data roles in Model/View Programming.
When QStyledItemDelegate paints its items, it draws CE_ItemViewItem, and calculates their size with CT_ItemViewItem. Note also that it uses SE_ItemViewItemText to set the size of editors. When implementing a style to customize drawing of item views, you need to check the implementation of QCommonStyle (and any other subclasses from which your style inherits). This way, you find out which and how other style elements are painted, and you can then reimplement the painting of elements that should be drawn differently.
We include a small example where we customize the drawing of item backgrounds.

      switch (element) {
          case (PE_PanelItemViewItem): {
              painter->save();

              QPoint topLeft = option->rect.topLeft();
              QPoint bottomRight = option->rect.topRight();
              QLinearGradient backgroundGradient(topLeft, bottomRight);
              backgroundGradient.setColorAt(0.0, QColor(Qt::yellow).lighter(190));
              backgroundGradient.setColorAt(1.0, Qt::white);
              painter->fillRect(option->rect, QBrush(backgroundGradient));

              painter->restore();
          break;
          }
          default:
              QProxyStyle::drawPrimitive(element, option, painter, widget);
      }

The primitive element PE_PanelItemViewItem is responsible for painting the background of items, and is called from QCommonStyle's implementation of CE_ItemViewItem.
To add support for drawing of new datatypes and item data roles, it is necessary to create a custom delegate. But if you only need to support the datatypes implemented by the default delegate, a custom style does not need an accompanying delegate. The QStyledItemDelegate class description gives more information on custom delegates.
The drawing of item view headers is also done by the style, giving control over size of header items and row and column sizes.
See also QStyleOption, QStylePainter, Styles Example, Styles and Style Aware Widgets, QStyledItemDelegate, and Styling.



Widgets Walkthrough:

------------------------------
Push Buttons
------------------------------
The style structure 
for push buttons is shown below. 
By doing a top-down traversal of the tree, 
you get the sequence in which the elements should be drawn.
￼
The layout of the buttons, 
with regard to element bounds, 
varies from style to style. 
This makes it difficult to show conceptual images of this.
 
Also, 
elements may - even be intended to - have the same bounds; 
the PE_PushButtonBevel, 
for instance, 
is used in QCommonStyle 
to draw the elements that it contains: 
PE_FrameDefaultButton, PE_FrameButtonBevel, 
and PE_PanelButtonCommand, 
all of which have the same bounds in common style. 
PE_PushButtonBevel is also 
responsible for drawing the menu indicator 
(QCommonStyle draws PE_IndicatorArrowDown).
An image of a push button in the Java style 
that shows the bounding rectangles of the elements is given below. 
Colors are used to separate the bounding rectangles in the image; 
they do not fill any other purpose. 
This is also true for similar images for the other widgets.
￼
The Java style, 
as well as all other styles implemented in Qt, 
does not use PE_FrameButtonBevel. 
It is usual that 
a button with a PE_DefaultFrame 
adjusts the PE_PanelButtonCommand's rectangle by PM_ButtonDefaultIndicator. 
The CE_PushButtonLabel is found by adjusting the rect by PM_DefaultFrameWidth.

We will now examine the style option for push buttons - QStyleOptionButton. 
A table for the states 
that QPushButton can set on the style option follows:


-----------------------------
Check and Radio Buttons
-----------------------------
The structures 
for radio and check buttons are identical. 
We show the structure 
using QCheckBox element and pixel metric names:

